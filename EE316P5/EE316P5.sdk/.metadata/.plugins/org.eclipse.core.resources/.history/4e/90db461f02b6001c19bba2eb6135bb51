/*
 * main.c
 *
 *  Created on: Apr 18, 2018
 *      Author: arthur
 */

#include "main.h"

const u8 Channel_List[NUMBER_OF_CHANNELS] = {
	0,1
}; // 00008
const char *Channel_Names[32] = {
	"", "", "", "VP-VN",
	"", "", "", "",
	"", "", "", "",
	"", "", "", "",
	"A0", "A1", "A2", "A3",
	"A4", "A5", "A6", "A7",
	"A8", "A9", "A10", "A11",
	"A12", "A13", "A14", "A15"
};

/* this needs to be worked on */
void Xadc_Init(XSysMon *InstancePtr, u32 DeviceId) {
	XSysMon_Config *ConfigPtr;
	ConfigPtr = XSysMon_LookupConfig(DeviceId);
	XSysMon_CfgInitialize(InstancePtr, ConfigPtr, ConfigPtr->BaseAddress);

	// Disable the Channel Sequencer before configuring the Sequence registers.
	XSysMon_SetSequencerMode(InstancePtr, XSM_SEQ_MODE_SAFE);
	// Disable all alarms
	XSysMon_SetAlarmEnables(InstancePtr, 0x0);
	// Set averaging for all channels to 16 samples
	XSysMon_SetAvg(InstancePtr, XSM_AVG_16_SAMPLES);   // Can change this in future.
	// Set differential input mode for all channels
	//XSysMon_SetSeqInputMode(InstancePtr, XADC_SEQ_CHANNELS);
	// Set 6ADCCLK acquisition time in all channels
	XSysMon_SetSeqAcqTime(InstancePtr, XADC_SEQ_CHANNELS);
	// Disable averaging in all channels
	XSysMon_SetSeqAvgEnables(InstancePtr, XADC_SEQ_CHANNELS);
	// Enable all channels
	XSysMon_SetSeqChEnables(InstancePtr, XADC_SEQ_CHANNELS);
	// Set the ADCCLK frequency equal to 1/32 of System clock
	XSysMon_SetAdcClkDivisor(InstancePtr, 32);
	// Enable Calibration
	XSysMon_SetCalibEnables(InstancePtr, XSM_CFR1_CAL_PS_GAIN_OFFSET_MASK | XSM_CFR1_CAL_ADC_GAIN_OFFSET_MASK);
	// Enable the Channel Sequencer in continuous sequencer cycling mode
	XSysMon_SetSequencerMode(InstancePtr, XSM_SEQ_MODE_CONTINPASS);
	// Clear the old status
//	XSysMon_GetStatus(InstancePtr);
}

#define READDATA_DBG 1
u32 Xadc_ReadData (XSysMon *InstancePtr, u16 RawData[32])
{
	u8 Channel;

	if (READDATA_DBG != 0)
		xil_printf("Waiting for EOS...\r\n");

	// Clear the Status
	XSysMon_GetStatus(InstancePtr);
	// Wait until the End of Sequence occurs
	while ((XSysMon_GetStatus(InstancePtr) & XSM_SR_EOS_MASK) != XSM_SR_EOS_MASK);

	if (READDATA_DBG != 0)
		xil_printf("Capturing XADC Data...\r\n");
	// Cycle through AUX Channels
	for (Channel=0; Channel<16; Channel++) {
		if (READDATA_DBG != 0)
			xil_printf("Capturing Data for Channel %d\r\n", XADCPS_CH_AUX_MIN + Channel);
		RawData[Channel] = XSysMon_GetAdcData(InstancePtr, XADCPS_CH_AUX_MIN + Channel);
		printf("Port: %d Value: %d \n\r",Channel_Names[XADCPS_CH_AUX_MIN + Channel],XSysMon_GetAdcData(InstancePtr, XADCPS_CH_AUX_MIN + Channel));
	}
	return XADC_CHANNELS; // return a high bit for each channel successfully read
}

float Xadc_RawToVoltage(u16 Data) {
	return ADC_MAXIMUM_VOLTAGE * (float)Data/(float)0xFFFF; //ADC_MAXIMUM_VOLTAGE * ((float)Data / ((float)(2^11) - 1)); //2^resolution-1 (12 bit resolution, signed)
}

/* This needs to be looked at */
//void Btn_Init(XGpio *InstancePtr, u32 DeviceId) {
//	XGpio_Config *ConfigPtr;
//	printf("Btn_Init 1");
//	ConfigPtr = XGpio_LookupConfig(DeviceId);
//	printf("Btn_Init 2");
//	XGpio_CfgInitialize(InstancePtr, ConfigPtr, ConfigPtr->BaseAddress);
//	printf("Btn_Init 3");
//	XGpio_SetDataDirection(InstancePtr, 1, 0b11);
//	printf("Btn_Init 4");
//}

float Xadc_Read(XSysMon *InstancePtr, u32 ChannelSelect) {
	u16 Xadc_RawData[32];
	u32 ChannelValidVector;
	float Xadc_VoltageData;
	ChannelValidVector = Xadc_ReadData(InstancePtr, Xadc_RawData);
	Xadc_VoltageData = Xadc_RawToVoltage(Xadc_RawData[XADCPS_CH_AUX_MIN + ChannelSelect]);
	printf("Analog Input %s: %.3fV\r\n", Channel_Names[XADCPS_CH_AUX_MIN + ChannelSelect], Xadc_VoltageData);
	return Xadc_VoltageData;
}
