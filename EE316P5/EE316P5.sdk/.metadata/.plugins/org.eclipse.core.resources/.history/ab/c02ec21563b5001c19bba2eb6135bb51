
/***************************** Include Files *********************************/
#include "xtmrctr.h"   /* xTimer Control */
#include "xadcps.h"    /* xADC Control */
#include "xparameters.h"
#include "xil_exception.h"
#include "PWM.h"
#include <stdbool.h>


/************************** Constant Definitions *****************************/
/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are only defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define TMRCTR_DEVICE_ID        XPAR_TMRCTR_0_DEVICE_ID
#define TIMER_PWM_PERIOD        3125000
#define PWM_PERIOD              2500000
/* From Custom IP Core */
void PWM_Config(int period, int duty, int pwmIndex);
void PWM_Read(int pwmIndex);
/* From Timer */
void timerPWM_Init(XTmrCtr *InstancePtr);
void timerPWM_Config(XTmrCtr *InstancePtr, int period, int duty);



/************************** Variable Definitions *****************************/
XTmrCtr TimerCounterInst;  /* The instance of the Timer Counter */
XAdcPs ADCInst;            /* The instance of the ADC */


int main(void)
{
	timerPWM_Init(&TimerCounterInst);
	PWM_Config(PWM_PERIOD,PWM_PERIOD/2,0); //125Mhz/25000000 = .20s
	timerPWM_Config(&TimerCounterInst,TIMER_PWM_PERIOD,TIMER_PWM_PERIOD/2)
	while(1){
		PWM_Read(0); //Read PWM Index 0 Values
	}
}

void PWM_Config(int period, int duty,int pwmIndex){
	PWM_Disable(XPAR_PWM_0_PWM_AXI_BASEADDR);
	PWM_Set_Period(XPAR_PWM_0_PWM_AXI_BASEADDR, period);
	PWM_Set_Duty(XPAR_PWM_0_PWM_AXI_BASEADDR, duty, pwmIndex);
	PWM_Enable(XPAR_PWM_0_PWM_AXI_BASEADDR);
}

void PWM_Read(int pwmIndex){
	printf("PWM Duty: %d, PWM Period: %d",PWM_Get_Period(XPAR_PWM_0_PWM_AXI_BASEADDR),PWM_Get_Duty(XPAR_PWM_0_PWM_AXI_BASEADDR,pwmIndex));
}

void timerPWM_Config(XTmrCtr *InstancePtr, int period, int duty){
	/* Disable PWM for reconfiguration */
	XTmrCtr_PwmDisable(InstancePtr);
	XTmrCtr_PwmConfigure(InstancePtr, period, duty);

	/* Enable PWM */
	XTmrCtr_PwmEnable(InstancePtr);
}

void timerPWM_Init(XTmrCtr *InstancePtr){
	int Status;
	Status = XTmrCtr_Initialize(InstancePtr, XPAR_TMRCTR_0_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		printf("PWM INIT FAIL");
	}
}

int StartPWM(){
	int Status;

	/*
	* Initialize the timer counter so that it's ready to use,
	* specify the device ID that is generated in xparameters.h
	*/
	Status = XTmrCtr_Initialize(&TimerCounterInst, XPAR_TMRCTR_0_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Disable PWM for reconfiguration */
	XTmrCtr_PwmDisable(&TimerCounterInst);
	XTmrCtr_PwmConfigure(&TimerCounterInst, PWM_PERIOD, Duty_Cycle);

	/* Enable PWM */
    XTmrCtr_PwmEnable(&TimerCounterInst);


    return 0;
}
