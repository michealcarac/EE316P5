/*
 * main.c
 *
 *  Created on: Apr 18, 2018
 *      Author: arthur
 */

#include "main.h"

#define XADC_SEQ_CHANNELS 0x3
#define XADC_CHANNELS 0x3

const u8 Channel_List[NUMBER_OF_CHANNELS] = {
	0,1 // A0 and A1 for Single Ended Input
};
const char *Channel_Names[32] = {
	"A0", "A1"
};

#define Test_Bit(VEC,BIT) ((VEC&(1<<BIT))!=0)

void Xadc_Init(XSysMon *InstancePtr, u32 DeviceId) {
	XSysMon_Config *ConfigPtr;
	ConfigPtr = XSysMon_LookupConfig(DeviceId);
	XSysMon_CfgInitialize(InstancePtr, ConfigPtr, ConfigPtr->BaseAddress);

	// Disable the Channel Sequencer before configuring the Sequence registers.
	XSysMon_SetSequencerMode(InstancePtr, XSM_SEQ_MODE_SAFE);
	// Disable all alarms
	XSysMon_SetAlarmEnables(InstancePtr, 0x0);
	// Set averaging for all channels to 16 samples
	XSysMon_SetAvg(InstancePtr, XSM_AVG_16_SAMPLES);   // Can change this in future.
	// Set differential input mode for all channels
	//XSysMon_SetSeqInputMode(InstancePtr, XADC_SEQ_CHANNELS);
	// Set 6ADCCLK acquisition time in all channels
	XSysMon_SetSeqAcqTime(InstancePtr, XADC_SEQ_CHANNELS);
	// Disable averaging in all channels
	XSysMon_SetSeqAvgEnables(InstancePtr, XADC_SEQ_CHANNELS);
	// Enable all channels
	XSysMon_SetSeqChEnables(InstancePtr, XADC_SEQ_CHANNELS);
	// Set the ADCCLK frequency equal to 1/32 of System clock
	XSysMon_SetAdcClkDivisor(InstancePtr, 32);
	// Enable Calibration
	XSysMon_SetCalibEnables(InstancePtr, XSM_CFR1_CAL_PS_GAIN_OFFSET_MASK | XSM_CFR1_CAL_ADC_GAIN_OFFSET_MASK);
	// Enable the Channel Sequencer in continuous sequencer cycling mode
	XSysMon_SetSequencerMode(InstancePtr, XSM_SEQ_MODE_CONTINPASS);
	// Clear the old status
//	XSysMon_GetStatus(InstancePtr);
}

#define READDATA_DBG 0
u32 Xadc_ReadData (XSysMon *InstancePtr, u16 RawData[32])
{
	u8 Channel;

	if (READDATA_DBG != 0)
		xil_printf("Waiting for EOS...\r\n");

	// Clear the Status
	XSysMon_GetStatus(InstancePtr);
	// Wait until the End of Sequence occurs
	while ((XSysMon_GetStatus(InstancePtr) & XSM_SR_EOS_MASK) != XSM_SR_EOS_MASK);

	if (READDATA_DBG != 0)
		xil_printf("Capturing XADC Data...\r\n");

	for (Channel=0; Channel<1; Channel++) {
		if (((1 << Channel) & XADC_CHANNELS) != 0) {
			if (READDATA_DBG != 0)
				xil_printf("Capturing Data for Channel %d\r\n", Channel);
			RawData[Channel] = XSysMon_GetAdcData(InstancePtr, Channel);
		}
	}
	return XADC_CHANNELS; // return a high bit for each channel successfully read
}

float Xadc_RawToVoltage(u16 Data, u8 Channel) {
	float FloatData;
	float Scale;

	FloatData  = ADC_MAXIMUM_VOLTAGE
	FloatData *= (float)Data / (float)0xFFFF;
	return FloatData;
}

void Btn_Init(XGpio *InstancePtr, u32 DeviceId) {
	XGpio_Config *ConfigPtr;
	printf("Btn_Init 1");
	ConfigPtr = XGpio_LookupConfig(DeviceId);
	printf("Btn_Init 2");
	XGpio_CfgInitialize(InstancePtr, ConfigPtr, ConfigPtr->BaseAddress);
	printf("Btn_Init 3");
	XGpio_SetDataDirection(InstancePtr, 1, 0b11);
	printf("Btn_Init 4");
}

void Xadc_Demo(XSysMon *InstancePtr, u32 RGBLED_BaseAddr, u32 ChannelSelect) {
	u16 Xadc_RawData[32];
	u32 ChannelValidVector;
	float Xadc_VoltageData;
	ChannelValidVector = Xadc_ReadData(InstancePtr, Xadc_RawData);
	if (Test_Bit(ChannelValidVector, ChannelSelect)) {
		Xadc_VoltageData = Xadc_RawToVoltage(Xadc_RawData[ChannelSelect], ChannelSelect);
		printf("Analog Input %s: %.3fV\r\n", Channel_Names[ChannelSelect], Xadc_VoltageData);
		if (Xadc_VoltageData > 0.5)
			RGBLED_SetColor(RGBLED_BaseAddr, 0x0000, 0x8000, 0x0000);
		else if (Xadc_VoltageData < -0.5)
			RGBLED_SetColor(RGBLED_BaseAddr, 0x8000, 0x0000, 0x0000);
		else
			RGBLED_SetColor(RGBLED_BaseAddr, 0x0000, 0x0000, 0x0000);
	} else {
		printf("Channel %d (%s) Not Available\r\n", (int)ChannelSelect, Channel_Names[ChannelSelect]);
		RGBLED_SetColor(RGBLED_BaseAddr, 0, 0, 0);
	}
}

int main () {
	XSysMon Xadc;
	u8 ChannelIndex = 0;
	XGpio Btn;
	u32 Btn_Data;
	const u32 RGBLED_BaseAddr = RGBLED_BASEADDR;
	Debounce Btn0_Db, Btn1_Db;
	u32 time_count = 0;

	Xadc_Init(&Xadc, XADC_DEVICE_ID);
	RGBLED_Init(RGBLED_BaseAddr);
	Btn_Init(&Btn, BTN_DEVICE_ID);
	Debounce_Init(&Btn0_Db, 10000);
	Debounce_Init(&Btn1_Db, 10000);

	printf("Cora XADC Demo Initialized!\r\n");

	while(1) {
		Btn_Data = XGpio_DiscreteRead(&Btn, 1) & 0b11;
		Debounce_Update(&Btn0_Db, Btn_Data & 0b01);
		Debounce_Update(&Btn1_Db, Btn_Data & 0b10);

		if (Btn1_Db.Flag == 1 && Btn0_Db.Flag == 0) {
			if (ChannelIndex + 1 < NUMBER_OF_CHANNELS)
				ChannelIndex ++;
			else
				ChannelIndex = 0;
		} else if (Btn1_Db.Flag == 0 && Btn0_Db.Flag == 1) {
			if (ChannelIndex > 0)
				ChannelIndex --;
			else
				ChannelIndex = NUMBER_OF_CHANNELS-1;
		}

		time_count ++;
		if (time_count == 100000) { // print channel reading approx. 10x per second
			time_count = 0;
			Xadc_Demo(&Xadc, RGBLED_BaseAddr, Channel_List[ChannelIndex]);
		}
		usleep(1);
	}
}
