
/***************************** Include Files *********************************/
#include "main.h"

/************************** Variable Definitions *****************************/
XTmrCtr TimerCounterInst;  /* The instance of the Timer Counter */
XTmrCtr TimerPWMInst;      /* The instance of the Timer PWM */
XSysMon Xadc;              /* The instance of the xADC */
XGpio Btn;                 /* The instance of the Button GPIO */
XGpio LCD;                 /* The instance of the LCD GPIO */

int main(void)
{
	/* Initialize Variables */
	//u8 ChannelIndex = 0;  /* Select ADC Channel */
	float ADC_Val = 0;
	u32 PWM_Servo = 0;
	//u32 Btn_Data;         /* Initialize Button Data */
	u32 time_count = 0;  /* Counter for ADC, will be switched to a delay from timer interrupts */
	//Debounce Btn0_Db, Btn1_Db, Btn2_Db, Btn3_Db;  /* Type of Debounce */
	int FSM_State = 1;

	/* ADC and Button Init */
	Xadc_Init(&Xadc, XADC_DEVICE_ID);
//	Btn_Init(&Btn, BTN_DEVICE_ID);
//	Debounce_Init(&Btn0_Db, 10000);
//	Debounce_Init(&Btn1_Db, 10000);
//	Debounce_Init(&Btn2_Db, 10000);
//	Debounce_Init(&Btn3_Db, 10000);
	/* Timer/PWM Init */
	timerPWM_Init(&TimerPWMInst);   //Initialize Timer PWM
	timerPWM_Config(&TimerPWMInst,TIMER_PWM_PERIOD,0); //Initialized to 0% duty
	PWM_Config(PWM_PERIOD,0,0); //Initialized to 0% duty
	printf("test\n\r");
	/* While loop */
	while(1){
		if (time_count == 100000) { // print channel reading approx. 10x per second
			time_count = 0;
			switch(FSM_State) {
				case 0:
					ADC_Val = Xadc_Read(&Xadc,1); //Grab ADC Value of channel 1
					printf("ADC Value (A0): %.3f \n\r",ADC_Val);
				case 1:
					ADC_Val = Xadc_Read(&Xadc,9); //Grab ADC Value of channel 9
					printf("ADC Value (A1): %.3f \n\r",ADC_Val);
			}

			/* Custom PWM Core */
			/* This will be running a servo from 2.5% to 12.5% duty */
			PWM_Servo = (u32)(((ADC_Val/ADC_MAXIMUM_VOLTAGE)*PWM_DUTY_MULTIPLIER)+PWM_DUTY_OFFSET);
			PWM_Config(PWM_PERIOD,PWM_Servo,0); //Set Duty Cycle
			printf("PWM Servo Duty: %lu \n\r", PWM_Servo);

			/* Timer PWM Core */
			/* This will be running the



			//timerPWM_Config(&TimerPWMInst,TIMER_PWM_PERIOD,  );
			//duty_ADC = TIMER_PWM_PERIOD * (duty_ADC/ADC_MAXIMUM_VOLTAGE);
			//timerPWM_Config(&TimerPWMInst,TIMER_PWM_PERIOD,(u32)duty_ADC);


			//duty_ADC = PWM_PERIOD * (duty_ADC/ADC_MAXIMUM_VOLTAGE);
			//PWM_Config(PWM_PERIOD,(u32)(duty_ADC),0); //Set Duty Cycle
			//printf("duty_adc: %d \n\r",(u32)duty_ADC);
			//printf("Timer PWM Duty: %d, PWM Period: %d \n\r",(u32)duty_ADC,TIMER_PWM_PERIOD);
			//printf("PWM Duty: %d, PWM Period: %d \n\r",PWM_Get_Duty(XPAR_PWM_0_PWM_AXI_BASEADDR,PWM_index),PWM_PERIOD);
		}
		time_count++;
		usleep(1);
	}

}





