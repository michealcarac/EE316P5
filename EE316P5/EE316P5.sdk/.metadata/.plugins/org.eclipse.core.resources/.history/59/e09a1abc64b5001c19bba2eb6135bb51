
/***************************** Include Files *********************************/
#include "xtmrctr.h"   /* xTimer Control */
#include "xadcps.h"    /* xADC Control */
#include "xparameters.h"
#include "xil_exception.h"
#include "PWM.h"       /* Custom PWM Control */
#include "xsysmon.h"
#include "sleep.h"
#include "stdio.h"
#include "xgpio.h"
#include "xil_types.h"
#include "debounce.h"


/************************** Constant Definitions *****************************/
/* PWM/Timer Usage */
#define TMRCTR_DEVICE_ID        XPAR_TMRCTR_0_DEVICE_ID
#define TIMER_PWM_PERIOD        3125000  // 25ms
#define PWM_PERIOD              2500000  // 20ms
#define PWM_index               0        // 0 index
/* ADC Usage */
#define XADC_DEVICE_ID XPAR_XADC_WIZ_0_DEVICE_ID
/* GPIO Usage */
#define BTN_DEVICE_ID XPAR_AXI_GPIO_0_DEVICE_ID
#define LCD_DEVICE_ID XPAR_AXI_GPIO_1_DEVICE_ID
/* From Custom IP Core */
void PWM_Config(int period, int duty, int pwmIndex);
/* From Timer */
void timerPWM_Init(XTmrCtr *InstancePtr);
void timerPWM_Config(XTmrCtr *InstancePtr, int period, int duty);



/************************** Variable Definitions *****************************/
XTmrCtr TimerCounterInst;  /* The instance of the Timer Counter */
XAdcPs ADCInst;            /* The instance of the ADC */


int main(void)
{
	timerPWM_Init(&TimerCounterInst);   //Initialize Timer PWM
	timerPWM_Config(&TimerCounterInst,TIMER_PWM_PERIOD,TIMER_PWM_PERIOD/2); //Initialized to 50% duty
	PWM_Config(PWM_PERIOD,PWM_PERIOD/2,0); //Initialized to 50% duty
	while(1){
		printf("PWM Duty: %d, PWM Period: %d",PWM_Get_Period(XPAR_PWM_0_PWM_AXI_BASEADDR),PWM_Get_Duty(XPAR_PWM_0_PWM_AXI_BASEADDR,PWM_index));
	}
}

void PWM_Config(int period, int duty,int pwmIndex){
	PWM_Disable(XPAR_PWM_0_PWM_AXI_BASEADDR);
	PWM_Set_Period(XPAR_PWM_0_PWM_AXI_BASEADDR, period);
	PWM_Set_Duty(XPAR_PWM_0_PWM_AXI_BASEADDR, duty, pwmIndex);
	PWM_Enable(XPAR_PWM_0_PWM_AXI_BASEADDR);
}


void timerPWM_Config(XTmrCtr *InstancePtr, int period, int duty){
	/* Disable PWM for reconfiguration */
	XTmrCtr_PwmDisable(InstancePtr);
	XTmrCtr_PwmConfigure(InstancePtr, period, duty);
	/* Enable PWM */
	XTmrCtr_PwmEnable(InstancePtr);
}

void timerPWM_Init(XTmrCtr *InstancePtr){
	int Status;
	Status = XTmrCtr_Initialize(InstancePtr, XPAR_TMRCTR_0_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		printf("PWM INIT FAIL");
	}
}

